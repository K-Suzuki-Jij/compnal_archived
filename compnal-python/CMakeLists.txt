cmake_minimum_required(VERSION 3.17)
project(compnal)

enable_language(CXX)

set(CMAKE_VERBOSE_MAKEFILE TRUE)

if (APPLE)
    set(CMAKE_MACOSX_RPATH TRUE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-command-line-argument")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -Wno-unused-command-line-argument")
endif()

set(CMAKE_CXX_STANDARD 17)
set(CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_VERBOSE_MAKEFILE TRUE)


##### Set default behavior #####
set(DEFAULT_USE_OMP Yes)
set(DEFAULT_USE_TEST No)
option(USE_TEST "Use test code" No)


# Use OpenMP as default behavior
message(STATUS "FORCE_USE_OMP = ${FORCE_USE_OMP}")

if(NOT APPLE) 
  if(NOT DEFINED USE_OMP) 
    set(USE_OMP ${DEFAULT_USE_OMP})
  endif() 
else() 
  if(FORCE_USE_OMP)
    set(USE_OMP ${DEFAULT_USE_OMP})
    message(STATUS "APPLE_FORCE_USE_OMP = ${FORCE_USE_OMP}")
  endif()
endif()

if(NOT DEFINED USE_TEST)
    set(USE_TEST ${DEFAULT_USE_TEST})
endif()

if(USE_OMP)
    set(CMAKE_INSTALL_OPENMP_LIBRARIES ON)
    if(APPLE) 
      if(NOT CMAKE_OSX_ARCHITECTURES)
        message(STATUS "Apple Native Build")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
	endif()
      elseif(${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64")
        message(STATUS "APPLE SILICON")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
        else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      else()
        message(STATUS "APPLE X86-64")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
	endif()
      endif()
    else()
      find_package(OpenMP REQUIRED)
      if(OpenMP_FOUND)
        message(STATUS "OMP_FOUND = YES")
        add_definitions(-DUSE_OMP)
      endif()
    endif()
else() 
  if(APPLE) 
      if(NOT CMAKE_OSX_ARCHITECTURES)
        message(STATUS "APPLE Native Build")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
	else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      elseif(${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64")
        message(STATUS "APPLE SILICON")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
        else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      else()
        message(STATUS "APPLE X86-64")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
           add_definitions(-DUSE_OMP)
	else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      endif()
  endif()
endif()

set(CMAKE_CXX_FLAGS_RELEASE "-Ofast")

if (APPLE)
    find_package(BLAS)
    find_package(LAPACK)
endif()

message(STATUS "USE_OMP = ${USE_OMP}")
message(STATUS "USE_TEST = ${USE_TEST}")

list(APPEND CMAKE_MODULE_PATH external)
if(USE_TEST)
    include(external/googletest.cmake)
else()
	message(STATUS "Skip downloding googletest")
endif()

include(cmake/pybind11.cmake)
find_package(Python COMPONENTS Development.Module)

add_subdirectory(base_compnal)